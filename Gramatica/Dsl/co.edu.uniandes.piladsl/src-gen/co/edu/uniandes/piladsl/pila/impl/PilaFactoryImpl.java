/**
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.piladsl.pila.impl;

import co.edu.uniandes.piladsl.pila.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PilaFactoryImpl extends EFactoryImpl implements PilaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PilaFactory init()
  {
    try
    {
      PilaFactory thePilaFactory = (PilaFactory)EPackage.Registry.INSTANCE.getEFactory(PilaPackage.eNS_URI);
      if (thePilaFactory != null)
      {
        return thePilaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PilaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PilaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PilaPackage.PAGO_SERVICIO: return createPagoServicio();
      case PilaPackage.ENTIDAD: return createEntidad();
      case PilaPackage.ATRIBUTO: return createAtributo();
      case PilaPackage.LLAVE_VALOR: return createLlaveValor();
      case PilaPackage.SERVICIO_COMPUTO: return createServicioComputo();
      case PilaPackage.VARIABLE: return createVariable();
      case PilaPackage.CONDICION: return createCondicion();
      case PilaPackage.EXPRESION: return createExpresion();
      case PilaPackage.NOMBRE_CALIFICADO: return createNombreCalificado();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PilaPackage.TIPO_DATO_PRIMITIVO:
        return createTipoDatoPrimitivoFromString(eDataType, initialValue);
      case PilaPackage.OPERADOR:
        return createOperadorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PilaPackage.TIPO_DATO_PRIMITIVO:
        return convertTipoDatoPrimitivoToString(eDataType, instanceValue);
      case PilaPackage.OPERADOR:
        return convertOperadorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PagoServicio createPagoServicio()
  {
    PagoServicioImpl pagoServicio = new PagoServicioImpl();
    return pagoServicio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entidad createEntidad()
  {
    EntidadImpl entidad = new EntidadImpl();
    return entidad;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Atributo createAtributo()
  {
    AtributoImpl atributo = new AtributoImpl();
    return atributo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LlaveValor createLlaveValor()
  {
    LlaveValorImpl llaveValor = new LlaveValorImpl();
    return llaveValor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ServicioComputo createServicioComputo()
  {
    ServicioComputoImpl servicioComputo = new ServicioComputoImpl();
    return servicioComputo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condicion createCondicion()
  {
    CondicionImpl condicion = new CondicionImpl();
    return condicion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expresion createExpresion()
  {
    ExpresionImpl expresion = new ExpresionImpl();
    return expresion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NombreCalificado createNombreCalificado()
  {
    NombreCalificadoImpl nombreCalificado = new NombreCalificadoImpl();
    return nombreCalificado;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TipoDatoPrimitivo createTipoDatoPrimitivoFromString(EDataType eDataType, String initialValue)
  {
    TipoDatoPrimitivo result = TipoDatoPrimitivo.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTipoDatoPrimitivoToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operador createOperadorFromString(EDataType eDataType, String initialValue)
  {
    Operador result = Operador.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperadorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PilaPackage getPilaPackage()
  {
    return (PilaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PilaPackage getPackage()
  {
    return PilaPackage.eINSTANCE;
  }

} //PilaFactoryImpl
