/*
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.piladsl.serializer;

import co.edu.uniandes.piladsl.pila.Atributo;
import co.edu.uniandes.piladsl.pila.Condicion;
import co.edu.uniandes.piladsl.pila.Entidad;
import co.edu.uniandes.piladsl.pila.Expresion;
import co.edu.uniandes.piladsl.pila.LlaveValor;
import co.edu.uniandes.piladsl.pila.NombreCalificado;
import co.edu.uniandes.piladsl.pila.PagoServicio;
import co.edu.uniandes.piladsl.pila.PilaPackage;
import co.edu.uniandes.piladsl.pila.ServicioComputo;
import co.edu.uniandes.piladsl.pila.Variable;
import co.edu.uniandes.piladsl.services.PilaGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PilaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PilaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PilaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PilaPackage.ATRIBUTO:
				sequence_Atributo(context, (Atributo) semanticObject); 
				return; 
			case PilaPackage.CONDICION:
				sequence_Condicion(context, (Condicion) semanticObject); 
				return; 
			case PilaPackage.ENTIDAD:
				sequence_Entidad(context, (Entidad) semanticObject); 
				return; 
			case PilaPackage.EXPRESION:
				if (rule == grammarAccess.getExpresionTerminalRule()) {
					sequence_ExpresionTerminal(context, (Expresion) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpresionRule()) {
					sequence_Expresion(context, (Expresion) semanticObject); 
					return; 
				}
				else break;
			case PilaPackage.LLAVE_VALOR:
				sequence_LlaveValor(context, (LlaveValor) semanticObject); 
				return; 
			case PilaPackage.NOMBRE_CALIFICADO:
				sequence_NombreCalificado(context, (NombreCalificado) semanticObject); 
				return; 
			case PilaPackage.PAGO_SERVICIO:
				sequence_PagoServicio(context, (PagoServicio) semanticObject); 
				return; 
			case PilaPackage.SERVICIO_COMPUTO:
				sequence_ServicioComputo(context, (ServicioComputo) semanticObject); 
				return; 
			case PilaPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Atributo returns Atributo
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ((tipoPrimitivo=TipoDatoPrimitivo (listaLlaveValor+=LlaveValor listaLlaveValor+=LlaveValor*)?) | listaEntidad=[Entidad|ID] | referencia=ID)
	 *     )
	 */
	protected void sequence_Atributo(ISerializationContext context, Atributo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condicion returns Condicion
	 *
	 * Constraint:
	 *     (
	 *         (((condicionSi='si' | condicionSi='siNo') expresionCondicion=Expresion) | condicionSiNinguno='siNinguno') 
	 *         variables+=Variable* 
	 *         (asignacionVariable=[Variable|ID] expresion+=Expresion)? 
	 *         subCondiciones+=Condicion* 
	 *         expresionRetorno=Expresion?
	 *     )
	 */
	protected void sequence_Condicion(ISerializationContext context, Condicion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns Entidad
	 *
	 * Constraint:
	 *     (name=ID atributos+=Atributo*)
	 */
	protected void sequence_Entidad(ISerializationContext context, Entidad semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpresionTerminal returns Expresion
	 *
	 * Constraint:
	 *     (entero=INT | real=INT | nombreCalificado=NombreCalificado)
	 */
	protected void sequence_ExpresionTerminal(ISerializationContext context, Expresion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns Expresion
	 *
	 * Constraint:
	 *     (izquierda=ExpresionTerminal (operador+=Operador derechas+=ExpresionTerminal)*)
	 */
	protected void sequence_Expresion(ISerializationContext context, Expresion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LlaveValor returns LlaveValor
	 *
	 * Constraint:
	 *     (llave=INT valor=CADENA_LITERAL)
	 */
	protected void sequence_LlaveValor(ISerializationContext context, LlaveValor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PilaPackage.Literals.LLAVE_VALOR__LLAVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PilaPackage.Literals.LLAVE_VALOR__LLAVE));
			if (transientValues.isValueTransient(semanticObject, PilaPackage.Literals.LLAVE_VALOR__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PilaPackage.Literals.LLAVE_VALOR__VALOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLlaveValorAccess().getLlaveINTTerminalRuleCall_0_0(), semanticObject.getLlave());
		feeder.accept(grammarAccess.getLlaveValorAccess().getValorCADENA_LITERALTerminalRuleCall_2_0(), semanticObject.getValor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NombreCalificado returns NombreCalificado
	 *
	 * Constraint:
	 *     (ides+=ID ides+=ID*)
	 */
	protected void sequence_NombreCalificado(ISerializationContext context, NombreCalificado semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PagoServicio returns PagoServicio
	 *
	 * Constraint:
	 *     (entidades+=Entidad+ serviciosComputo+=ServicioComputo*)
	 */
	protected void sequence_PagoServicio(ISerializationContext context, PagoServicio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServicioComputo returns ServicioComputo
	 *
	 * Constraint:
	 *     (name=ID variables+=Variable* condiciones+=Condicion* expresionRetorno=Expresion?)
	 */
	protected void sequence_ServicioComputo(ISerializationContext context, ServicioComputo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID (tipoPrimitivo=TipoDatoPrimitivo | referenciaEntidad=[Entidad|ID]) expresion=Expresion)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
