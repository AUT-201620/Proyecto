package services;

import entities.*;
import persistence.*;

import javax.annotation.ManagedBean;
import javax.inject.Inject;

import java.util.*;

/**
 * @author am.osorio
 * Servicios CRUD de [%=controlador.nombre.firstToUpperCase()%]
 */
@ManagedBean
public class [%=controlador.nombre.firstToUpperCase()%]Services implements I[%=controlador.nombre.firstToUpperCase()%]Services {

	private [%=controlador.nombre.firstToUpperCase()%]Persistence persistance;

	/**
	 * Constructor  [%=controlador.nombre.firstToUpperCase()%]Services
	 */
	public [%=controlador.nombre.firstToUpperCase()%]Services() {
		persistance = new [%=controlador.nombre.firstToUpperCase()%]Persistence();
	}
	
	/**
	 *
	 * @return
	 */
	@Override
	public List<[%=controlador.nombre.firstToUpperCase()%]> findAll() {
		List<[%=controlador.nombre.firstToUpperCase()%]> [%=controlador.nombre.toLowerCase()%]List = persistance.findAll();
		return [%=controlador.nombre.toLowerCase()%]List;
	}
	
	/**
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public [%=controlador.nombre.firstToUpperCase()%] find(Long id) {
		[%=controlador.nombre.firstToUpperCase()%] [%=controlador.nombre.toLowerCase()%] = persistance.find(id);
		return [%=controlador.nombre.toLowerCase()%];
	}
	
	/**
	 * 
	 * @param [%=controlador.nombre.toLowerCase()%]
	 * @return
	 */
	@Override
	public [%=controlador.nombre.firstToUpperCase()%] create([%=controlador.nombre.firstToUpperCase()%] [%=controlador.nombre.toLowerCase()%]) {
		return persistance.create([%=controlador.nombre.toLowerCase()%]);
	}
	
	/**
	 * 
	 * @param [%=controlador.nombre.toLowerCase()%]
	 * @return
	 */
	@Override
	public [%=controlador.nombre.firstToUpperCase()%] update([%=controlador.nombre.firstToUpperCase()%] [%=controlador.nombre.toLowerCase()%]) {
		return persistance.update([%=controlador.nombre.toLowerCase()%]);
	}
	
	/**
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public void delete(Long id) {
		persistance.delete(id);
	}
	
	[%	
	//Determinar si el modelo es referencia de otro modelo
	var modeloConReferencia = mArq!Modelo.all.select(
		m|m.nombre <> controlador.nombre.firstToUpperCase() and
		  m.atributos.select(
		   a|a.tipo == mArq!TipoDato#REFERENCE and a.tipoReferencia == mArq!TipoReferencia#ONE_TO_MANY and a.modeloReferencia.nombre ==controlador.nombre.firstToUpperCase()
		  ).size() > 0
		);

	if (modeloConReferencia.size()>0) {
			for (modeloReferencia in modeloConReferencia) {
%]
	 @Override
	 public List<[%=controlador.nombre.firstToUpperCase()%]> findBy[%=modeloReferencia.nombre.firstToUpperCase()%]Id(Long [%=modeloReferencia.nombre.firstToLowerCase()%]Id) {
    	List<[%=controlador.nombre.firstToUpperCase()%]> [%=controlador.nombre.firstToLowerCase()%]List = persistance.findBy[%=modeloReferencia.nombre.firstToUpperCase()%]Id([%=modeloReferencia.nombre.firstToLowerCase()%]Id);
    	return [%=controlador.nombre.firstToLowerCase()%]List;        
	    }
    
    @Override
    public List<[%=controlador.nombre.firstToUpperCase()%]> findBy[%=modeloReferencia.nombre.firstToUpperCase()%]All([%=modeloReferencia.nombre.firstToUpperCase()%] [%=modeloReferencia.nombre.firstToLowerCase()%]) {
    	List<[%=controlador.nombre.firstToUpperCase()%]> [%=controlador.nombre.firstToLowerCase()%]List = persistance.findBy[%=modeloReferencia.nombre.firstToUpperCase()%]All([%=modeloReferencia.nombre.firstToLowerCase()%]);
    	return [%=controlador.nombre.firstToLowerCase()%]List;        

    }
  [%
 		}
 	}
 %]
 
}