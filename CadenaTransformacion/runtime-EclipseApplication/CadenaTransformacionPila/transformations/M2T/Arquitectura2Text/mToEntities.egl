package entities;

import javax.persistence.*;
import java.io.Serializable;
import java.math.*;
import java.util.*;

/**
 * @author am.osorio
 *
 */
[%
	//Determinar los modelos que apuntan a este modelo con referencias One To Many
	var modelosConRefOneToManyAEsteModelo = modelo.eContainer().modelos.select(
		m|m.nombre <> modelo.nombre and 
		  m.atributos.select(
		    a|a.tipo = mArq!TipoDato#REFERENCE and
		      a.tipoReferencia = mArq!TipoReferencia#ONE_TO_MANY and 
		      a.modeloReferencia.nombre = modelo.nombre
		  ).size() > 0
		);

	//Determinar los modelos que apuntan a este modelo con referencias Many To Many
	var modelosConRefManyToManyAEsteModelo = modelo.eContainer().modelos.select(
		m|m.nombre <> modelo.nombre and 
		  m.atributos.select(
		    a|a.tipo = mArq!TipoDato#REFERENCE and
		      a.tipoReferencia = mArq!TipoReferencia#MANY_TO_MANY and 
		      a.modeloReferencia.nombre = modelo.nombre
		  ).size() > 0
		).asOrderedSet();
%]

@NamedQueries({
	@NamedQuery(name = "[%=modelo.nombre.firstToUpperCase()%].get[%=modelo.nombre.firstToUpperCase().obtenerPlural()%]",
    	query = "SELECT e FROM [%=modelo.nombre.firstToUpperCase()%] e")
[%
	if (modelosConRefManyToManyAEsteModelo.size() > 0) {
		var joins: String := '';
		var wheres: String := '';
		var aliasTablaPrincipal: String := 't0';
		var tableNumber: Integer := 1;
		var separador: String := '';
		var nombre: String = '';
		for (modeloRef in modelosConRefManyToManyAEsteModelo) {
			nombre = nombre + modeloRef.nombre.firstToUpperCase();
			joins = joins + ' join ' + aliasTablaPrincipal + '.' + modeloRef.nombre.firstToLowerCase() + ' t' + tableNumber; 
			wheres = wheres + separador + 't' + tableNumber + '.id = :id' + modeloRef.nombre.firstToUpperCase(); 
			separador := ' and ';
			tableNumber := tableNumber + 1;
		}
%]    	
	, @NamedQuery(name = "[%=modelo.nombre.firstToUpperCase()%].getBy[%=nombre%]",
	   	query = "SELECT [%=aliasTablaPrincipal%] FROM [%=modelo.nombre.firstToUpperCase()%] [%=aliasTablaPrincipal%]" +
	   	        "[%=joins%] WHERE [%=wheres%]")
[%
	}
		if (modelosConRefOneToManyAEsteModelo.size()>0) {
			for (modelosConRefOneToMany in modelosConRefOneToManyAEsteModelo) {
%]
	, @NamedQuery(name="[%=modelo.nombre.firstToUpperCase()%].findBy[%=modelosConRefOneToMany.nombre.firstToUpperCase()%]Id",
        query = "SELECT e FROM [%=modelo.nombre.firstToUpperCase()%] e WHERE e.[%=modelosConRefOneToMany.nombre.firstToLowerCase()%].id = :[%=modelosConRefOneToMany.nombre.firstToLowerCase()%]Id ORDER BY e.fechaCreacion ")
    , @NamedQuery(name="[%=modelo.nombre.firstToUpperCase()%].findBy[%=modelosConRefOneToMany.nombre.firstToUpperCase()%]All",
        query = "SELECT e FROM [%=modelo.nombre.firstToUpperCase()%] e WHERE e.[%=modelosConRefOneToMany.nombre.firstToLowerCase()%] = :[%=modelosConRefOneToMany.nombre.firstToLowerCase()%]")
[%
 		}
 	}
 %]
})

@Entity
public class [%=modelo.nombre.firstToUpperCase()%] implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	private Long id;
[%
	for (atributo in modelo.atributos) {
		if (atributo.tipo.name == 'REFERENCE') {
			if (atributo.tipoReferencia = mArq!TipoReferencia#MANY_TO_ONE) {
%]
	@ManyToOne
	private [%=atributo.modeloReferencia.nombre.firstToUpperCase()%] [%=atributo.nombre%];
[%
			}
			else if (atributo.tipoReferencia = mArq!TipoReferencia#ONE_TO_MANY) {
%]
	@OneToMany(cascade = {CascadeType.ALL}, mappedBy = "[%=modelo.nombre.firstToLowerCase()%]")
	private List<[%=atributo.modeloReferencia.nombre.firstToUpperCase()%]> [%=atributo.nombre%];
[%
			}
			else if (atributo.tipoReferencia = mArq!TipoReferencia#MANY_TO_MANY) {
%]
	@ManyToMany
	private List<[%=atributo.modeloReferencia.nombre.firstToUpperCase()%]> [%=atributo.nombre%];
[%
			}
		}
		else {
%]
	private [%=atributo.tipo.name.toLowerCase().firstToUpperCase()%] [%=atributo.nombre%];
[%
		}
	}
%]
[%
	//Determinar los modelos que apuntan a este modelo con referencias One To Many
	var modelosConRefOneToManyAEsteModelo = modelo.eContainer().modelos.select(
		m|m.nombre <> modelo.nombre and 
		  m.atributos.select(
		    a|a.tipo = mArq!TipoDato#REFERENCE and
		      a.tipoReferencia = mArq!TipoReferencia#ONE_TO_MANY and 
		      a.modeloReferencia.nombre = modelo.nombre
		  ).size() > 0
		);
	if (modelosConRefOneToManyAEsteModelo.size() > 0) {
%]
	//Referencia Bidireccional a Entidades que refieren a esta entidad como One To Many
[%		
		for (modeloRef in modelosConRefOneToManyAEsteModelo) {
%]
	@ManyToOne
	@JoinColumn(name="[%=modeloRef.nombre.firstToLowerCase()%]_id", nullable = false)
	private [%=modeloRef.nombre.firstToUpperCase()%] [%=modeloRef.nombre.firstToLowerCase()%];
[%
		}
	}
%]
[%
	//Determinar los modelos que apuntan a este modelo con referencias Many To Many
	var modelosConRefManyToManyAEsteModelo = modelo.eContainer().modelos.select(
		m|m.nombre <> modelo.nombre and 
		  m.atributos.select(
		    a|a.tipo = mArq!TipoDato#REFERENCE and
		      a.tipoReferencia = mArq!TipoReferencia#MANY_TO_MANY and 
		      a.modeloReferencia.nombre = modelo.nombre
		  ).size() > 0
		);
	if (modelosConRefManyToManyAEsteModelo.size() > 0) {
%]
	//Referencia Bidireccional a Entidades que refieren a esta entidad como Many To Many
[%		
		for (modeloRef in modelosConRefManyToManyAEsteModelo) {
%]
	@ManyToMany(mappedBy = "[%=modelo.nombre.firstToLowerCase()%]")
	private List<[%=modeloRef.nombre.firstToUpperCase()%]> [%=modeloRef.nombre.firstToLowerCase()%];
[%
		}
	}
%]

	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}
	/**
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

[%
	for (atributo in modelo.atributos) {
		if (atributo.tipo.name == 'REFERENCE') {
			if (atributo.tipoReferencia = mArq!TipoReferencia#MANY_TO_ONE) {
%]
				/**
				 * @return the [%=atributo.nombre.firstToLowerCase()%]
				 */
				public [%=atributo.modeloReferencia.nombre.firstToUpperCase()%] get[%=atributo.nombre.firstToUpperCase()%]() {
					return [%=atributo.nombre.firstToLowerCase()%];
				}
				/**
				 * @param [%=atributo.nombre.firstToLowerCase()%] the [%=atributo.nombre.firstToLowerCase()%] to set
				 */
				public void set[%=atributo.modeloReferencia.nombre.firstToUpperCase()%]([%=atributo.modeloReferencia.nombre.firstToUpperCase()%] [%=atributo.nombre.firstToLowerCase()%]) {
					this.[%=atributo.nombre.firstToLowerCase()%] = [%=atributo.nombre.firstToLowerCase()%];
				}
	
[%
			}else if(atributo.tipoReferencia = mArq!TipoReferencia#ONE_TO_MANY) {
%]
			/**
			 * @return the [%=atributo.nombre.firstToLowerCase()%]
			 */
			public List<[%=atributo.modeloReferencia.nombre.firstToUpperCase()%]> get[%=atributo.nombre.firstToUpperCase()%]() {
				return [%=atributo.nombre.firstToLowerCase()%];
			}
			/**
			 * @param [%=atributo.nombre.firstToLowerCase()%] the [%=atributo.nombre.firstToLowerCase()%] to set
			 */
			public void set[%=atributo.nombre.firstToUpperCase()%](List<[%=atributo.modeloReferencia.nombre.firstToUpperCase()%]> [%=atributo.nombre.firstToLowerCase()%]) {
				this.[%=atributo.nombre.firstToLowerCase()%] = [%=atributo.nombre.firstToLowerCase()%];
			}
			
			/**
			 * 
			 * @return
			 */
			public boolean tiene[%=atributo.modeloReferencia.nombre.firstToUpperCase().obtenerPlural()%](){
				return ([%=atributo.modeloReferencia.nombre.firstToLowerCase().obtenerPlural()%] != null && ![%=atributo.modeloReferencia.nombre.firstToLowerCase().obtenerPlural()%].isEmpty());
			}
			
			/**
			 * 
			 * @return
			 */
			public [%=atributo.modeloReferencia.nombre.firstToUpperCase()%] ultima[%=atributo.modeloReferencia.nombre.firstToUpperCase()%](){
				if(tiene[%=atributo.modeloReferencia.nombre.firstToUpperCase().obtenerPlural()%]()){
					return [%=atributo.modeloReferencia.nombre.firstToLowerCase().obtenerPlural()%].get([%=atributo.modeloReferencia.nombre.firstToLowerCase().obtenerPlural()%].size()-1);
				}
				return null;
			}

[%
			}else{
%]
			/**
			 * @return the [%=atributo.nombre.firstToLowerCase()%]
			 */
			public List<[%=atributo.modeloReferencia.nombre.firstToUpperCase()%]> get[%=atributo.nombre.firstToUpperCase()%]() {
				return [%=atributo.nombre.firstToLowerCase()%];
			}
			/**
			 * @param [%=atributo.nombre.firstToLowerCase()%] the [%=atributo.nombre.firstToLowerCase()%] to set
			 */
			public void set[%=atributo.nombre.firstToUpperCase()%](List<[%=atributo.modeloReferencia.nombre.firstToUpperCase()%]> [%=atributo.nombre.firstToLowerCase()%]) {
				this.[%=atributo.nombre.firstToLowerCase()%] = [%=atributo.nombre.firstToLowerCase()%];
			}
			
[%			
			}
		}
		else {
%]
			/**
			 * @return the [%=atributo.nombre.firstToLowerCase()%]
			 */
			public [%=atributo.tipo.name.toLowerCase().firstToUpperCase()%] get[%=atributo.nombre.firstToUpperCase()%]() {
				return [%=atributo.nombre.firstToLowerCase()%];
			}
			/**
			 * @param [%=atributo.nombre.firstToLowerCase()%] the [%=atributo.nombre.firstToLowerCase()%] to set
			 */
			public void set[%=atributo.nombre.firstToUpperCase()%]([%=atributo.tipo.name.toLowerCase().firstToUpperCase()%] [%=atributo.nombre.firstToLowerCase()%]) {
				this.[%=atributo.nombre.firstToLowerCase()%] = [%=atributo.nombre.firstToLowerCase()%];
			}

[%
		}
	}
%]
[%
	if (modelosConRefOneToManyAEsteModelo.size() > 0) {
		for (modeloRef in modelosConRefOneToManyAEsteModelo) {
%]
	/**
	 * @return the [%=modeloRef.nombre.firstToLowerCase()%]
	 */
	public [%=modeloRef.nombre.firstToUpperCase()%] get[%=modeloRef.nombre.firstToUpperCase()%]() {
		return [%=modeloRef.nombre.firstToLowerCase()%];
	}
	/**
	 * @param [%=modeloRef.nombre.firstToLowerCase()%] the [%=modeloRef.nombre.firstToLowerCase()%] to set
	 */
	public void set[%=modeloRef.nombre.firstToUpperCase()%]([%=modeloRef.nombre.firstToUpperCase()%] [%=modeloRef.nombre.firstToLowerCase()%]) {
		this.[%=modeloRef.nombre.firstToLowerCase()%] = [%=modeloRef.nombre.firstToLowerCase()%];
	}
	
	 public int diasEntreFechaFinInicio(){
		long difference =  (fechaFin.getTime()-fechaInicio.getTime())/86400000;
        return (int) Math.abs(difference);
	}
[%
		}
	}
%]
[%
	if (modelosConRefManyToManyAEsteModelo.size() > 0) {
		for (modeloRef in modelosConRefManyToManyAEsteModelo) {
%]
	/**
	 * @return the [%=modeloRef.nombre.firstToLowerCase()%]
	 */
	public List<[%=modeloRef.nombre.firstToUpperCase()%]> get[%=modeloRef.nombre.firstToUpperCase()%]() {
		return [%=modeloRef.nombre.firstToLowerCase()%];
	}
	/**
	 * @param [%=modeloRef.nombre.firstToLowerCase()%] the [%=modeloRef.nombre.firstToLowerCase()%] to set
	 */
	public void set[%=modeloRef.nombre.firstToUpperCase()%](List<[%=modeloRef.nombre.firstToUpperCase()%]> [%=modeloRef.nombre.firstToLowerCase()%]) {
		this.[%=modeloRef.nombre.firstToLowerCase()%] = [%=modeloRef.nombre.firstToLowerCase()%];
	}
[%
		}
	}
%]
	@Override
	public String toString() {
		return "[%=modelo.nombre.firstToUpperCase()%]{" +
				"id=" + id +
				[%for (atributo in modelo.atributos) {
				%]
				", [%=atributo.nombre.firstToLowerCase()%]='" + [%=atributo.nombre.firstToLowerCase()%] + '\'' +
				[% } %]
				'}';
	}
}

[%
	operation String obtenerPlural(): String {
		if (self.endsWith('a') or self.endsWith('e') or self.endsWith('i') or self.endsWith('o') or self.endsWith('u')) {
			return self + 's';
		}  
		return self + 'es'; 
	}
%]	 
