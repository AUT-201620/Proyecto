package web.beans;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.bean.*;
import javax.faces.event.ValueChangeEvent;

import entities.*;
import services.*;
import enumerators.*;

/**
 * Backing Bean para la pantalla [%=vista.nombre.firstToUpperCase()%]
 *
 */

[%
//Determinar si la vista es referencia de otra vista
	var vistaConReferencia = mArq!Vista.all.select(
		m|m.nombre <> vista.nombre.firstToUpperCase() and
		  m.atributos.select(
		   a|a.tipo == mArq!TipoAtributoVista#REFERENCIA and a.vistaReferencia.nombre ==vista.nombre.firstToUpperCase()
		  ).size() > 0
		);
%]	
@ManagedBean
[%
if(vistaConReferencia.size()>0){
%]
@SessionScoped
[%
}else{
%]
@ViewScoped
[%
}
%]
public class [%=vista.nombre.firstToUpperCase()%]Bean implements Serializable {

	private static final long serialVersionUID = 1L;

	private List<[%=vista.nombre.firstToUpperCase()%]> [%=vista.nombre.firstToLowerCase()%]List = new ArrayList<[%=vista.nombre.firstToUpperCase()%]>();
	private I[%=vista.nombre.firstToUpperCase()%]Services services;
	[%
		if(vista.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA).size()>0){
	%]
		private IValidacionesServices validacionesServices;
	[%
		}
	%]
	[%
		if(vistaConReferencia.size()>0){
			for (vistaRef in vistaConReferencia){
	%]			
			 	private I[%=vistaRef.nombre.firstToUpperCase()%]Services services[%=vistaRef.nombre.firstToUpperCase()%];
			 	private [%=vistaRef.nombre.firstToUpperCase()%] [%=vistaRef.nombre.firstToLowerCase()%];	
	[%
			}
		}
	%]
	
	private [%=vista.nombre.firstToUpperCase()%] [%=vista.nombre.firstToLowerCase()%];
	private Long identificador;
	private Boolean buttonCrud;
	[%
	vista.obtenerTipoAtributosEnum();
	vista.obtenerTipoAtributosLista();
	%]

	/**
	 * Constructor de [%=vista.nombre.firstToUpperCase()%]Bean
	 */
	public [%=vista.nombre.firstToUpperCase()%]Bean() {
		services = new [%=vista.nombre.firstToUpperCase()%]Services();
		[%=vista.nombre.firstToLowerCase()%] = new [%=vista.nombre.firstToUpperCase()%]();
		buttonCrud = Boolean.TRUE;
		[%
		if(vista.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA).size()>0){
		%]
			validacionesServices = new ValidacionesServices();
		[%
			}
			for(atributo in vista.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA)){
		%]
			[%=vista.nombre.firstToLowerCase()%].set[%=atributo.nombre.firstToUpperCase()%](new [%=atributo.nombre.firstToUpperCase()%]());
		[%
		}
		vista.getRelationConstructor();
		%]
	}
	
	[%
		if(vistaConReferencia.size()=0){
	%]
	/**
	 * 
	 */
	@PostConstruct
	public void init() {
		this.[%=vista.nombre.firstToLowerCase()%]List = services.findAll();
	}
	[%
		}
	%]

	[%
		vista.getRelationMetodo();
	%]
	public void crear() {
	[%
		vista.getCrearRelacion();
	%]
		services.create(this.[%=vista.nombre.firstToLowerCase()%]);
		[%
			if(vistaConReferencia.size()>0){
				for (vistaRef in vistaConReferencia){
		%]
				this.[%=vista.nombre.firstToLowerCase()%]List = services.findBy[%=vistaRef.nombre.firstToUpperCase()%]All([%=vistaRef.nombre.firstToLowerCase()%]);	
		[%
				}
			}else{
		%]
			this.[%=vista.nombre.firstToLowerCase()%]List = services.findAll();
		[%
			}
		%]
	}

	public void delete() {
		services.delete(this.identificador);
		[%
			if(vistaConReferencia.size()>0){
				for (vistaRef in vistaConReferencia){
		%]
				this.[%=vista.nombre.firstToLowerCase()%]List = services.findBy[%=vistaRef.nombre.firstToUpperCase()%]All([%=vistaRef.nombre.firstToLowerCase()%]);	
		[%
				}
			}else{
		%]
			this.[%=vista.nombre.firstToLowerCase()%]List = services.findAll();
		[%
			}
		%]
	}

	public void ver() {
		this.[%=vista.nombre.firstToLowerCase()%] = services.find(this.identificador);
		buttonCrud = Boolean.FALSE;
		[%
		if(vista.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA).size()>0){
		%]
			getListTipos();
		[%
		}
		%]
	}
	

	public void editar() {
		this.[%=vista.nombre.firstToLowerCase()%] = services.update(this.[%=vista.nombre.firstToLowerCase()%]);
		[%
			if(vistaConReferencia.size()>0){
				for (vistaRef in vistaConReferencia){
		%]
				this.[%=vista.nombre.firstToLowerCase()%]List = services.findBy[%=vistaRef.nombre.firstToUpperCase()%]All([%=vistaRef.nombre.firstToLowerCase()%]);	
		[%
				}
			}else{
		%]
			this.[%=vista.nombre.firstToLowerCase()%]List = services.findAll();
		[%
			}
		%]
	}

	public void clear[%=vista.nombre.firstToUpperCase()%]() {
		this.[%=vista.nombre.firstToLowerCase()%] = new [%=vista.nombre.firstToUpperCase()%]();
		buttonCrud = Boolean.TRUE;
	[%
		for(atributo in vista.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA)){
	%]
		[%=vista.nombre.firstToLowerCase()%].set[%=atributo.nombre.firstToUpperCase()%](new [%=atributo.nombre.firstToUpperCase()%]());
	[%
	}
		if(vista.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA).size()>0){
	%]
		this.tipoPensionado = null;
		this.tipoPagadorPension = null;
	[%
		}
	%]
	}
	[%
		vista.getValidaciones();
	%]
	
	/**
	 * @return the [%=vista.nombre.firstToLowerCase()%]List
	 */
	public List<[%=vista.nombre.firstToUpperCase()%]> get[%=vista.nombre.firstToUpperCase()%]List() {
		return [%=vista.nombre.firstToLowerCase()%]List;
	}

	/**
	 * @param [%=vista.nombre.firstToLowerCase()%]List
	 * the [%=vista.nombre.firstToLowerCase()%]List to set
	 */
	public void set[%=vista.nombre.firstToUpperCase()%]List(List<[%=vista.nombre.firstToUpperCase()%]> [%=vista.nombre.firstToLowerCase()%]List) {
		this.[%=vista.nombre.firstToLowerCase()%]List = [%=vista.nombre.firstToLowerCase()%]List;
	}

	/**
	 * @return the [%=vista.nombre.firstToLowerCase()%]
	 */
	public [%=vista.nombre.firstToUpperCase()%] get[%=vista.nombre.firstToUpperCase()%]() {
		if ([%=vista.nombre.firstToLowerCase()%] == null) {
			[%=vista.nombre.firstToLowerCase()%] = new [%=vista.nombre.firstToUpperCase()%]();
		}
		return [%=vista.nombre.firstToLowerCase()%];
	}

	/**
	 * @param [%=vista.nombre.firstToLowerCase()%]
	 * the [%=vista.nombre.firstToLowerCase()%] to set
	 */
	public void set[%=vista.nombre.firstToUpperCase()%]([%=vista.nombre.firstToUpperCase()%] [%=vista.nombre.firstToLowerCase()%]) {
		this.[%=vista.nombre.firstToLowerCase()%] = [%=vista.nombre.firstToLowerCase()%];
	}

	/**
	 * @return the identificador
	 */
	public Long getIdentificador() {
		return identificador;
	}

	/**
	 * @param identificador
	 * the identificador to set
	 */
	public void setIdentificador(Long identificador) {
		this.identificador = identificador;
	}

	/**
	 * @return the buttonCrud
	 */
	public Boolean getButtonCrud() {
		return buttonCrud;
	}

	/**
	 * @param buttonCrud the buttonCrud to set
	 */
	public void setButtonCrud(Boolean buttonCrud) {
		this.buttonCrud = buttonCrud;
	}
[%
	vista.getSetRelacion();
	vista.obtenerTipoAtributosEnumGetSet();
	vista.obtenerTipoAtributosListaGetSet();
%]
}

[%
	operation mArq!Vista obtenerTipoAtributosEnum() {
		for (atributo in self.atributos.select(a|a.tipo == mArq!TipoAtributoVista#ENUM)) {
			out.print('private '+atributo.nombre.firstToUpperCase()+'Enum [] '+atributo.nombre.firstToLowerCase()+'Enum;\n');
		}
	}
	
	operation mArq!Vista obtenerTipoAtributosEnumGetSet() {
		for (atributo in self.atributos.select(a|a.tipo == mArq!TipoAtributoVista#ENUM)) {
			out.print('/**\n');
			out.print(' * @return the' +atributo.nombre.firstToLowerCase()+'\n');
			out.print(' */ \n');
			out.print('public '+atributo.nombre.firstToUpperCase()+'Enum[] get'+atributo.nombre.firstToUpperCase()+'Enum() {\n');
				out.print('return '+atributo.nombre.firstToUpperCase()+'Enum.values();\n');
			out.print('}\n');
		
			out.print('/**\n');
			out.print(' * @param '+atributo.nombre.firstToLowerCase()+' the '+atributo.nombre.firstToLowerCase()+' to set\n');
			out.print(' */\n');
			out.print('public void set'+atributo.nombre.firstToUpperCase()+'Enum('+atributo.nombre.firstToUpperCase()+'Enum[] '+atributo.nombre.firstToLowerCase()+'Enum) {\n');
			out.print('this.'+atributo.nombre.firstToLowerCase()+'Enum = '+atributo.nombre.firstToLowerCase()+'Enum;\n');
			out.print('}\n');
		}
	}
	
	operation mArq!Vista obtenerTipoAtributosLista() {
		for (atributo in self.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA)) {
			out.print('private List<'+atributo.nombre.firstToUpperCase()+'> ' +atributo.nombre.firstToLowerCase()+';\n');
		}
	}
	
	operation mArq!Vista obtenerTipoAtributosListaGetSet() {	
		for (atributo in self.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA)) {
			out.print('/**\n');
			out.print(' * @return the ' +atributo.nombre.firstToLowerCase()+'\n');
			out.print(' */ \n');
			out.print('public List<'+atributo.nombre.firstToUpperCase()+'> get'+atributo.nombre.firstToUpperCase()+'() {\n');
				if(atributo.nombre == 'tipoPension'){
					out.print('this.'+atributo.nombre.firstToLowerCase()+'= validacionesServices.get'+atributo.nombre.firstToUpperCase().obtenerPlural()+'();\n');
				}
				out.print('return '+atributo.nombre.firstToLowerCase()+';\n');
			out.print('}\n');
		
			out.print('/**\n');
			out.print(' * @param '+atributo.nombre.firstToLowerCase()+' the '+atributo.nombre.firstToLowerCase()+' to set\n');
			out.print(' */\n');
			out.print('public void set'+atributo.nombre.firstToUpperCase()+'(List<'+atributo.nombre.firstToUpperCase()+'> '+atributo.nombre.firstToLowerCase()+') {\n');
			out.print('this.'+atributo.nombre.firstToLowerCase()+' = '+atributo.nombre.firstToLowerCase()+';\n');
			out.print('}\n');
		}
	}
	
	operation mArq!Vista getValidaciones() {
		//Determinar los modelos que apuntan a este modelo con referencias Many To Many
		var modelosConRefManyToManyAEsteModelo =  mArq!Modelo.all.select(
			m|m.nombre <> 'TipoPagadorPension' and 
			  m.atributos.select(
			    a|a.tipo = mArq!TipoDato#REFERENCE and
			      a.tipoReferencia = mArq!TipoReferencia#MANY_TO_MANY and 
			      a.modeloReferencia.nombre = 'TipoPagadorPension'
			  ).size() > 0
			).asOrderedSet();
			
		if(self.atributos.select(a|a.tipo == mArq!TipoAtributoVista#LISTA).size()>0){
			
			out.print('public void getListTipos() {\n');	
			out.print('if('+self.nombre.firstToLowerCase()+'.getTipoPension() != null && '+self.nombre.firstToLowerCase()+'.getTipoPension().getId()>0){\n');
			out.print('this.setTipoPensionado(validacionesServices.getByTipoPension('+self.nombre.firstToLowerCase()+'.getTipoPension().getId()));\n');
			out.print('} else{\n');
			out.print('this.setTipoPensionado(new ArrayList<TipoPensionado>());\n');
			out.print('}');
			
			if (modelosConRefManyToManyAEsteModelo.size() > 0) {
				var parametros: String := '';
				var parametrosEje: String := '';
				var nombre: String = '';
				var separador: String = '';
				var listaParametros: Set;
				for (modeloRef in modelosConRefManyToManyAEsteModelo) {
					nombre = nombre + modeloRef.nombre.firstToUpperCase();
					parametros = parametros + separador + 'Long id' + modeloRef.nombre.firstToUpperCase(); 
					parametrosEje = parametrosEje + separador + 'id' + modeloRef.nombre.firstToUpperCase();
					listaParametros.add('id' + modeloRef.nombre.firstToUpperCase()); 
					separador := ', ';
				}
			    out.print('if('+self.nombre.firstToLowerCase()+'.getTipoPension() != null && '+self.nombre.firstToLowerCase()+'.getTipoPension().getId()>0 && '+self.nombre.firstToLowerCase()+'.getTipoPensionado().getId() != null && '+self.nombre.firstToLowerCase()+'.getTipoPensionado().getId() >0){\n');
				out.print('this.setTipoPagadorPension(validacionesServices.getBy'+nombre+'('+self.nombre.firstToLowerCase()+'.getTipoPension().getId(),'+self.nombre.firstToLowerCase()+'.getTipoPensionado().getId()));\n');
				out.print('}\n');
			    out.print('else{\n');
				out.print('this.setTipoPagadorPension(new ArrayList<TipoPagadorPension>());\n');
				out.print('}\n');
				
			}
		out.print('}\n');
		}
	}
	
	operation mArq!Vista getRelaciones(){
		for (vistaReferencia in mArq!Vista.all.select(m|m.nombre <> self.nombre.firstToUpperCase())){
			for (atributoReferencia in vistaReferencia.atributos.select(a|a.tipo == mArq!TipoAtributoVista#REFERENCIA and a.vistaReferencia.nombre ==self.nombre.firstToUpperCase())){
			 	out.print('private I'+vistaReferencia.nombre.firstToUpperCase()+'Services services'+vistaReferencia.nombre.firstToUpperCase()+';\n');
			 	out.print('private '+vistaReferencia.nombre.firstToUpperCase()+' '+vistaReferencia.nombre.firstToLowerCase()+';');
			}	
		}
	}
	
	operation mArq!Vista getCrearRelacion(){
		for (vistaReferencia in mArq!Vista.all.select(m|m.nombre <> self.nombre.firstToUpperCase())){
			for (atributoReferencia in vistaReferencia.atributos.select(a|a.tipo == mArq!TipoAtributoVista#REFERENCIA and a.vistaReferencia.nombre ==self.nombre.firstToUpperCase())){
			 	out.print(self.nombre.firstToLowerCase()+ '.set'+vistaReferencia.nombre.firstToUpperCase()+'('+vistaReferencia.nombre.firstToLowerCase()+');\n');
			}	
		}
	}
	
	operation mArq!Vista getSetRelacion(){
		for (vistaReferencia in mArq!Vista.all.select(m|m.nombre <> self.nombre.firstToUpperCase())){
			for (atributoReferencia in vistaReferencia.atributos.select(a|a.tipo == mArq!TipoAtributoVista#REFERENCIA and a.vistaReferencia.nombre ==self.nombre.firstToUpperCase())){
			 	
			 	out.print('/**\n');
				out.print('* @return the ' +vistaReferencia.nombre.firstToLowerCase()+'\n');
				out.print('*/\n');
				out.print('public '+vistaReferencia.nombre.firstToUpperCase()+' get'+vistaReferencia.nombre.firstToUpperCase()+'() {\n');
				out.print('return '+vistaReferencia.nombre.firstToLowerCase()+';\n');
				out.print('}\n');
				
				out.print('/**\n');
				out.print('* @param ' +vistaReferencia.nombre.firstToLowerCase()+'the '+vistaReferencia.nombre.firstToLowerCase()+'to set\n');
				out.print('*/\n');
				out.print('public void set'+vistaReferencia.nombre.firstToUpperCase()+'('+vistaReferencia.nombre.firstToUpperCase()+' '+vistaReferencia.nombre.firstToLowerCase()+' ) {\n');
				out.print('this.'+vistaReferencia.nombre.firstToLowerCase()+'='+vistaReferencia.nombre.firstToLowerCase()+';\n');
				out.print('}\n');
			}	
		}
	}
	operation mArq!Vista getRelationConstructor(){
		for (vistaReferencia in mArq!Vista.all.select(m|m.nombre <> self.nombre.firstToUpperCase())){
			for (atributoReferencia in vistaReferencia.atributos.select(a|a.tipo == mArq!TipoAtributoVista#REFERENCIA and a.vistaReferencia.nombre ==self.nombre.firstToUpperCase())){
			 	 out.print('services'+vistaReferencia.nombre.firstToUpperCase()+' = new '+vistaReferencia.nombre.firstToUpperCase()+'Services();\n');    
		 	}
		}
	}
	operation mArq!Vista getRelationMetodo(){
		for (vistaReferencia in mArq!Vista.all.select(m|m.nombre <> self.nombre.firstToUpperCase())){
			for (atributoReferencia in vistaReferencia.atributos.select(a|a.tipo == mArq!TipoAtributoVista#REFERENCIA and a.vistaReferencia.nombre ==self.nombre.firstToUpperCase())){
	
				out.print('public void findBy'+vistaReferencia.nombre.firstToUpperCase()+'(Long id'+vistaReferencia.nombre.firstToUpperCase()+'){\n');
				out.print(vistaReferencia.nombre.firstToLowerCase()+' = new '+vistaReferencia.nombre.firstToUpperCase()+'();\n');
				out.print(vistaReferencia.nombre.firstToLowerCase()+' =services'+vistaReferencia.nombre.firstToUpperCase()+'.find(id'+vistaReferencia.nombre.firstToUpperCase()+');\n');
				out.print('this.'+self.nombre.firstToLowerCase()+'List = services.findBy'+vistaReferencia.nombre.firstToUpperCase()+'All('+vistaReferencia.nombre.firstToLowerCase()+');\n');
				out.print('}\n');
			}
		}
	}

	operation String obtenerPlural(): String {
		if (self.endsWith('a') or self.endsWith('e') or self.endsWith('i') or self.endsWith('o') or self.endsWith('u')) {
			return self + 's';
		}  
		return self + 'es'; 
	}	
%]
